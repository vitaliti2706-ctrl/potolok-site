// api/telegram-submit.js

export default async function handler(req, res) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  // –î–æ—Å—Ç–∞—ë–º –ø–æ–ª—è –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
  const { name, phone, message } = req.body || {};

  try {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    const telegramRes = await fetch(
      `https://api.telegram.org/bot{process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: process.env.TELEGRAM_CHAT_ID,
          text: `–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞\n–ò–º—è: ${name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`,
        }),
      }
    );

    const data = await telegramRes.json();

    // –õ–æ–≥ –≤ Vercel ‚Üí Logs (—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç Telegram)
    console.log("–û—Ç–≤–µ—Ç Telegram API:", data);

    if (!data.ok) {
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ Telegram API", details: data });
    }

    return res.status(200).json({ success: true, data });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", err);
    return res.status(500).json({ error: "Internal Server Error", details: String(err) });
  }
}








