// /api/telegram-submit.js
export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    const { name = "", phone = "", message = "" } = req.body || {};

    const url = https://api.telegram.org/bot{process.env.TELEGRAM_BOT_TOKEN}/sendMessage;

    const payload = {
      chat_id: process.env.TELEGRAM_CHAT_ID,
      text: –ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞\nüë§ –ò–º—è: ${name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message},
    };

    // –ó–∞–ø—Ä–æ—Å –∫ Telegram
    const tgRes = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    // —á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç
    const raw = await tgRes.text();
    let data;
    try {
      data = JSON.parse(raw); // –µ—Å–ª–∏ —ç—Ç–æ JSON
    } catch (e) {
      data = { error: "Not JSON", raw }; // –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç
    }

    return res.status(200).json({ fromTelegram: data });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", err);
    return res.status(500).json({ error: "Internal Server Error", details: err.message });
  }
}
