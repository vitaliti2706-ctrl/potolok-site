// /api/telegram-submit.js
export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–∞—Ä—Å–∏–º –∏ —Å—Ç—Ä–æ–∫—É, –∏ –æ–±—ä–µ–∫—Ç)
  let body = {};
  try {
    if (req.body && typeof req.body === "object") {
      body = req.body;
    } else if (typeof req.body === "string") {
      body = JSON.parse(req.body || "{}");
    }
  } catch {
    body = {};
  }

  const { name = "", phone = "", message = "" } = body;

  // –ü—Ä–æ–≤–µ—Ä–∏–º, –ø–æ–¥—Ç—è–Ω—É–ª–∏—Å—å –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å Vercel
  console.log(
    "ENV TELEGRAM_BOT_TOKEN:",
    process.env.TELEGRAM_BOT_TOKEN ? "[set]" : "undefined"
  );
  console.log(
    "ENV TELEGRAM_CHAT_ID:",
    process.env.TELEGRAM_CHAT_ID || "undefined"
  );

  // –í–ê–ñ–ù–û: –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏ bot (–±–µ–∑ s)
  const url = https://api.telegram.org/bot{process.env.TELEGRAM_BOT_TOKEN}/sendMessage;

  const payload = {
    chat_id: process.env.TELEGRAM_CHAT_ID,
    text: –ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞\n–ò–º—è: ${name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message},
  };

  try {
    const tgRes = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    const raw = await tgRes.text();
    console.log("Raw Telegram response:", raw);

    let data;
    try {
      data = JSON.parse(raw);
    } catch {
      data = { parse_error: true, raw };
    }

    if (!tgRes.ok || data?.ok === false) {
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ Telegram API", details: data });
    }

    return res.status(200).json({ ok: true, result: data });
  } catch (err) {
    console.error("Handler error:", err);
    return res.status(500).json({ error: "Server error", details: String(err) });
  }
}














