// /api/telegram-submit.js
export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    let name = "", phone = "", message = "";
    const ct = (req.headers["content-type"] || "").toLowerCase();

    if (ct.includes("application/json")) {
      ({ name = "", phone = "", message = "" } = req.body || {});
    } else {
      // —á–∏—Ç–∞–µ–º ¬´—Å—ã—Ä–æ–π¬ª —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è form-urlencoded –∏ —Ç.–ø.)
      const chunks = [];
      for await (const chunk of req) chunks.push(chunk);
      const raw = Buffer.concat(chunks).toString();

      if (ct.includes("application/x-www-form-urlencoded")) {
        const p = new URLSearchParams(raw);
        name = p.get("name") || p.get("–∏–º—è") || "";
        phone = p.get("phone") || p.get("—Ç–µ–ª–µ—Ñ–æ–Ω") || "";
        message = p.get("message") || p.get("—Å–æ–æ–±—â–µ–Ω–∏–µ") || "";
      } else {
        // –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–∞–∫ JSON –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        try { ({ name = "", phone = "", message = "" } = JSON.parse(raw)); } catch {}
      }
    }

    name = String(name).trim() || "‚Äî";
    phone = String(phone).trim() || "‚Äî";
    message = String(message).trim() || "‚Äî";

    const token = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;
    if (!token || !chatId) {
      return res.status(500).json({ error: "Missing TELEGRAM_* env vars" });
    }

    const text =
      `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞\n` +
      `üë§ –ò–º—è: ${name}\n` +
      `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n` +
      `‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`;

    const tg = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ chat_id: chatId, text }),
    });

    const data = await tg.json();
    if (!tg.ok) throw new Error(data?.description || "Telegram error");

    return res.status(200).json({ ok: true, result: data });
  } catch (err) {
    console.error(err);
    return res.status(500).json({ ok: false, error: err.message });
  }
}


